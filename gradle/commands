
==================================================================
default >>
==================================================================

defaultTasks 'clean', 'run'

gradle			>> execute clean and run
gradle clean	>> execute clean only
gradle run		>> execute run only


==================================================================
default paramaetrs >>
==================================================================

task hello {
   doLast {
        println project.buildDir
        println project.projectDir
        println project.project
        println project.name
        println project.path
        println project.description
        println project.group
        println project.version
        println project.ant
        }
}

=========
result >>
=========
gradle -q hello

/var/lib/jenkins/workspace/mf4-installer/build
/var/lib/jenkins/workspace/mf4-installer
root project 'mf4-installer'
mf4-installer
:
null

unspecified
org.gradle.api.internal.project.DefaultAntBuilder@1c5af804


==================================================================
mustRunAfter or shouldRunAfter
==================================================================

task tasky {
   doLast {
        println 'tasky'
        }
}

task taskz {
    doLast {
        println 'taskz'
        }
}


taskz.mustRunAfter taskx

=========
result >>
=========
gradle -q taskx taskz

taskx
taskz

gradle -q taskz taskx

taskx
taskz


==================================================================
adding description to a task
==================================================================

task taskx(overwrite: true) {
   doLast {
        description 'this task will replace the above task'
        println 'taskx-which is new'
        }
}


==================================================================
Replacing task
==================================================================

task taskx {
   doLast {
        println 'taskx'
        }
}

task taskx(overwrite: true) {
   doLast {
        description 'this task will replace the above task'
        println 'taskx-which is new'
        }
}


=========
result >>
=========
gradle -q taskx

taskx-which is new


==================================================================
skiping task
==================================================================

task taska {
   doLast {
        println 'taska'
        }
}

taska.onlyIf { !project.hasProperty('skip') }


=========
result >>
=========
gradle -q taska

taska

gradle -q taska -Pskip

skipped....there is no result


==================================================================
Enabling and disabling tasks
==================================================================

task taskb {
   doLast {
        println 'taskb'
        }
}

taskb.enabled = false


=========
result >>
=========
gradle -q taskb

skipped....there is no result


==================================================================
creating directory >>
==================================================================

task create{
   doLast {
    def dirName = "/var/lib/jenkins/workspace/mf4-installer/t1/t2"
    mkdir dirName
	}
}


==================================================================
delete a directory >>
==================================================================

task mytask{
   doLast {
    def dirName = "/var/lib/jenkins/workspace/mf4-installer/t1"
    delete dirName
	}
}


==================================================================
moving file and directory >>
==================================================================

task move{
   doLast {
     file("t1").renameTo(file("t2"))
	}
}


==================================================================
copy >>
==================================================================

task mycopy(type: Copy) {
   doLast {
  from '/var/lib/jenkins/workspace/zipfile/'
  into '/var/lib/jenkins/workspace/mf4-installer/input/'
  include '*.war'
	}
}


==================================================================
zip file creation >>
==================================================================

task myzip(type: Zip) {
   doLast {
   from '/var/lib/jenkins/workspace/mf4-installer'
   exclude 'input'
   exclude 'compose'
   archiveName 'test.zip'
   destinationDir(file('/var/lib/jenkins/workspace/a/'))
	}
}


==================================================================
tar file creation >>
==================================================================

task mytar(type: Tar) {
   doLast {
   from '/var/lib/jenkins/workspace/mf4-installer'
   exclude 'input'
   exclude 'compose'
   archiveName 'test.tar'
   destinationDir(file('/var/lib/jenkins/workspace/a/'))
	}
}


==================================================================
jar file creation >>
==================================================================

task myjar(type: Jar) {
   doLast {
   from '/var/lib/jenkins/workspace/mf4-installer'
   exclude 'input'
   exclude 'compose'
   archiveName 'test.jar'
   destinationDir(file('/var/lib/jenkins/workspace/a/'))
	}
}


==================================================================
copy command and zip creation with depends
==================================================================

task mycopy(type: Copy) {
   doLast {
  from '/var/lib/jenkins/workspace/zipfile/'
  into '/var/lib/jenkins/workspace/mf4-installer/input/'
  include '*.war'
	}
}

task myzip(type: Zip) {
   doLast {
   from '/var/lib/jenkins/workspace/mf4-installer'
   exclude 'build.gradle-zip'
   archiveName '$ZIP_FILE_NAME'
   destinationDir(file('/var/lib/jenkins/workspace/'))
	}
}

myzip.dependsOn mycopy


==================================================================
listing files in a directory >>
==================================================================


task list {
    doLast {
        File srcDir

        // Create a file collection using a closure
        FileCollection collection = files { srcDir.listFiles() }

        srcDir = file('compose')
        println "Contents of $srcDir.name"
        collection.collect { relativePath(it) }.sort().each { println it }

        srcDir = file('/var/lib/jenkins/workspace/mf4-installer')
        println "Contents of $srcDir.name"
        collection.collect { relativePath(it) }.sort().each { println it }



    }
}


=========
result >>
=========
gradle -q list

Contents of compose
compose/mesaforte.yml

Contents of mf4-installer
.env
.git
.gradle
README.md
build
build.gradle
build.gradle-zip
compose
gradle
gradle.properties
gradlew
gradlew.bat
input


==================================================================



